
.. _program_listing_file_include_ripple_core_boundary_ghost_index.hpp:

Program Listing for File ghost_index.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_boundary_ghost_index.hpp>` (``include/ripple/core/boundary/ghost_index.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/core/boundary/ghost_index.hpp --------------- -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2019, 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_BOUNDARY_GHOST_INDEX_HPP
   #define RIPPLE_BOUNDARY_GHOST_INDEX_HPP
   
   #include <ripple/core/algorithm/unrolled_for.hpp>
   #include <ripple/core/execution/thread_index.hpp>
   #include <ripple/core/math/math.hpp>
   #include <ripple/core/utility/dim.hpp>
   
   namespace ripple {
   
   /*==--- [forward declaration] ----------------------------------------------==*/
   
   template <size_t Dimensions>
   struct GhostIndex;
   
   /*==--- [aliases] ----------------------------------------------------------==*/
   
   using ghost_index_1d_t = GhostIndex<1>;
   using ghost_index_2d_t = GhostIndex<2>;
   using ghost_index_3d_t = GhostIndex<3>;
   
   /*==--- [implementation] ---------------------------------------------------==*/
   
   template <size_t Dimensions>
   struct GhostIndex {
     /*==--- [traits] ---------------------------------------------------------==*/
   
     using value_t = int8_t;
   
     static constexpr auto void_value = value_t{0};
   
     //==--- [initialisation] -------------------------------------------------==//
   
    private:
     template <typename Iterator, typename Dim>
     ripple_all constexpr auto init_dim(
       Iterator&& it,
       size_t     idx,
       Dim&&      dim,
       size_t     size,
       bool&      valid_cell) noexcept -> void {
       // Set the value, and make sure that there is no overflow if the index
       // is too big, otherwise indices in the middle of a domain will think that
       // they need to load data!
       constexpr size_t max_padding = size_t{16};
       _values[dim]                 = static_cast<value_t>(
         std::min(max_padding, std::min(idx, size - idx - 1)));
   
       // Second condition for the case that there are more threads than the
       // iterator size in the dimension, and idx > it.size(), making the index
       // negative.
       if (_values[dim] < it.padding() && _values[dim] >= value_t{0}) {
         _values[dim] -= it.padding();
         const auto idx_i     = static_cast<int>(idx);
         const auto size_half = static_cast<int>(size) / 2;
   
         // Have to handle the case that the dimension is very small, i.e 2
         // elements, then idx_i - size_half = 0, rather than 1 which should be
         // the sign to use.
         _values[dim] *= idx_i == size_half ? 1 : math::sign(idx_i - size_half);
         valid_cell = true;
         return;
       }
       set_as_void(dim);
     }
   
    public:
     template <typename Iterator>
     ripple_all constexpr auto
     init_as_global(Iterator&& it) noexcept -> bool {
       bool loader_cell = false;
       unrolled_for<Dimensions>([&](auto d) {
         constexpr auto dim = d;
         const auto     idx = it.global_idx(dim);
         init_dim(it, idx, dim, it.global_size(dim), loader_cell);
       });
       return loader_cell;
     }
   
     template <typename Iterator, typename Space>
     ripple_all constexpr auto
     init_as_block(Iterator&& it, Space&& space) noexcept -> bool {
       bool loader_cell = false;
       unrolled_for<Dimensions>([&](auto d) {
         constexpr auto dim = d;
         const auto     idx = thread_idx(dim);
         init_dim(it, idx, dim, space.size(dim), loader_cell);
       });
       return loader_cell;
     }
   
     /*==--- [interface] -------------------------------------------------------=*/
   
     ripple_all constexpr auto dimensions() const noexcept -> size_t {
       return Dimensions;
     }
   
     /*==--- [access] ---------------------------------------------------------==*/
   
     template <typename Dim>
     ripple_all constexpr auto index(Dim&& dim) const noexcept -> value_t {
       return _values[dim];
     }
   
     template <typename Dim>
     ripple_all constexpr auto index(Dim&& dim) noexcept -> value_t& {
       return _values[dim];
     }
   
     template <typename Dim>
     ripple_all constexpr auto
     abs_index(Dim&& dim) const noexcept -> value_t {
       return math::sign(_values[dim]) * _values[dim];
     }
   
     /*==--- [utilities] ------------------------------------------------------==*/
   
     template <typename Dim>
     ripple_all constexpr auto is_front(Dim&& dim) const noexcept -> bool {
       return _values[dim] > value_t{0};
     }
   
     template <typename Dim>
     ripple_all constexpr auto is_back(Dim&& dim) const noexcept -> bool {
       return _values[dim] < value_t{0};
     }
   
     template <typename Dim>
     ripple_all constexpr auto is_void(Dim&& dim) const noexcept -> bool {
       return _values[dim] == void_value;
     }
   
     template <typename Dim>
     ripple_all constexpr auto set_as_void(Dim&& dim) noexcept -> void {
       _values[dim] = void_value;
     }
   
    private:
     value_t _values[3] = {void_value}; 
   };
   
   } // namespace ripple
   
   #endif // RIPPLE_BOUNDARY_GHOST_INDEX_HPP
