
.. _program_listing_file_include_ripple_core_execution_detail_thread_index_impl_.hpp:

Program Listing for File thread_index_impl_.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_execution_detail_thread_index_impl_.hpp>` (``include/ripple/core/execution/detail/thread_index_impl_.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- .../core/execution/detail/thread_index_impl_.hpp --- -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2019, 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_EXECUTION_DETAIL_THREAD_INDEX_IMPL__HPP
   #define RIPPLE_EXECUTION_DETAIL_THREAD_INDEX_IMPL__HPP
   
   #include "../execution_traits.hpp"
   #include "../../utility/dim.hpp"
   
   namespace ripple::detail {
   
   struct Dim3 {
     size_t x = 0; 
     size_t y = 0; 
     size_t z = 0; 
   };
   
   // clang-format off
   static thread_local Dim3   thread_idx_;
   static thread_local Dim3   block_idx_;
   static thread_local Dim3   block_dim_;
   static thread_local Dim3   grid_dim_;
   static thread_local Dim3   grid_elements_;
   // clang-format on
   
   inline ripple_device size_t global_elements_for_device_[3];
   
   #if (defined(__CUDA__) && defined(__CUDA_ARCH__)) || \
     (defined(__CUDACC__) && defined(__CUDA_ARCH__))
   
   template <typename Dim>
   ripple_all inline auto global_elements(Dim&& dim) noexcept -> size_t& {
     return global_elements_for_device_[dim];
   }
   
   /*==--- [thread idx] -------------------------------------------------------==*/
   
   ripple_all inline auto thread_idx(DimX) noexcept -> size_t {
     return threadIdx.x;
   }
   
   ripple_all inline auto thread_idx(DimY) noexcept -> size_t {
     return threadIdx.y;
   }
   
   ripple_all inline auto thread_idx(DimZ) noexcept -> size_t {
     return threadIdx.z;
   }
   
   ripple_all inline auto thread_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? thread_idx(dimx())
            : dim == DimY::value ? thread_idx(dimy())
            : dim == DimZ::value ? thread_idx(dimz())
                                 : 0;
   }
   
   /*==--- [block idx] --------------------------------------------------------==*/
   
   ripple_all inline auto block_idx(DimX) noexcept -> size_t {
     return blockIdx.x;
   }
   
   ripple_all inline auto block_idx(DimY) noexcept -> size_t {
     return blockIdx.y;
   }
   
   ripple_all inline auto block_idx(DimZ) noexcept -> size_t {
     return blockIdx.z;
   }
   
   ripple_all inline auto block_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? block_idx(dimx())
            : dim == DimY::value ? block_idx(dimy())
            : dim == DimZ::value ? block_idx(dimz())
                                 : 0;
   }
   
   /*==--- [global idx] -------------------------------------------------------==*/
   
   ripple_all inline auto global_idx(DimX) noexcept -> size_t {
     return threadIdx.x + blockIdx.x * blockDim.x;
   }
   
   ripple_all inline auto global_idx(DimY) noexcept -> size_t {
     return threadIdx.y + blockIdx.y * blockDim.y;
   }
   
   ripple_all inline auto global_idx(DimZ) noexcept -> size_t {
     return threadIdx.z + blockIdx.z * blockDim.z;
   }
   
   ripple_all inline auto global_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? global_idx(DimX())
            : dim == DimY::value ? global_idx(DimY())
            : dim == DimZ::value ? global_idx(DimZ())
                                 : 0;
   }
   
   /*==--- [block size] -------------------------------------------------------==*/
   
   ripple_all inline auto block_size(DimX) noexcept -> size_t {
     return blockDim.x;
   }
   
   ripple_all inline auto block_size(DimY) noexcept -> size_t {
     return blockDim.y;
   }
   
   ripple_all inline auto block_size(DimZ) noexcept -> size_t {
     return blockDim.z;
   }
   
   ripple_all inline auto block_size(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? block_size(dimx())
            : dim == DimY::value ? block_size(dimy())
            : dim == DimZ::value ? block_size(dimz())
                                 : 0;
   }
   
   /*==--- [grid size] --------------------------------------------------------==*/
   
   ripple_all inline auto grid_size(DimX) noexcept -> size_t {
     return gridDim.x;
   }
   
   ripple_all inline auto grid_size(DimY) noexcept -> size_t {
     return gridDim.y;
   }
   
   ripple_all inline auto grid_size(DimZ) noexcept -> size_t {
     return gridDim.z;
   }
   
   ripple_all inline auto grid_size(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? grid_size(dimx())
            : dim == DimY::value ? grid_size(dimy())
            : dim == DimZ::value ? grid_size(dimz())
                                 : 0;
   }
   
   #elif !defined(__CUDA__) || !defined(__CUDA_ARCH__) // __CUDA_ARCH__
   
   /*==--- [thread idx] -------------------------------------------------------==*/
   
   ripple_all inline auto thread_idx(DimX) noexcept -> size_t {
     return thread_idx_.x;
   }
   
   ripple_all inline auto thread_idx(DimY) noexcept -> size_t {
     return thread_idx_.y;
   }
   
   ripple_all inline auto thread_idx(DimZ) noexcept -> size_t {
     return thread_idx_.z;
   }
   
   ripple_all inline auto thread_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? thread_idx(dimx())
            : dim == DimY::value ? thread_idx(dimy())
            : dim == DimZ::value ? thread_idx(dimz())
                                 : 0;
   }
   
   /*==--- [block idx] -------------------------------------------------------==*/
   
   ripple_all inline auto block_idx(DimX) noexcept -> size_t {
     return block_idx_.x;
   }
   
   ripple_all inline auto block_idx(DimY) noexcept -> size_t {
     return block_idx_.y;
   }
   
   ripple_all inline auto block_idx(DimZ) noexcept -> size_t {
     return block_idx_.z;
   }
   
   ripple_all inline auto block_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? block_idx(dimx())
            : dim == DimY::value ? block_idx(dimy())
            : dim == DimZ::value ? block_idx(dimz())
                                 : 0;
   }
   
   /*==--- [grid idx] ---------------------------------------------------------==*/
   
   ripple_all inline auto global_idx(DimX) noexcept -> size_t {
     return block_idx_.x * block_dim_.x + thread_idx_.x;
   }
   
   ripple_all inline auto global_idx(DimY) noexcept -> size_t {
     return block_idx_.y * block_dim_.y + thread_idx_.y;
   }
   
   ripple_all inline auto global_idx(DimZ) noexcept -> size_t {
     return block_idx_.z * block_dim_.z + thread_idx_.z;
   }
   
   ripple_all inline auto global_idx(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? global_idx(dimx())
            : dim == DimY::value ? global_idx(dimy())
            : dim == DimZ::value ? global_idx(dimz())
                                 : 0;
   }
   
   /*==--- [block size] -------------------------------------------------------==*/
   
   ripple_all inline auto block_size(DimX) noexcept -> size_t {
     return block_dim_.x;
   }
   
   ripple_all inline auto block_size(DimY) noexcept -> size_t {
     return block_dim_.y;
   }
   
   ripple_all inline auto block_size(DimZ) noexcept -> size_t {
     return block_dim_.z;
   }
   
   ripple_all inline auto block_size(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? block_size(dimx())
            : dim == DimY::value ? block_size(dimy())
            : dim == DimZ::value ? block_size(dimz())
                                 : 0;
   }
   
   /*==--- [grid size] --------------------------------------------------------==*/
   
   ripple_all inline auto grid_size(DimX) noexcept -> size_t {
     return grid_dim_.x;
   }
   
   ripple_all inline auto grid_size(DimY) noexcept -> size_t {
     return grid_dim_.y;
   }
   
   ripple_all inline auto grid_size(DimZ) noexcept -> size_t {
     return grid_dim_.z;
   }
   
   ripple_all inline auto grid_size(size_t dim) noexcept -> size_t {
     return dim == DimX::value   ? grid_size(dimx())
            : dim == DimY::value ? grid_size(dimy())
            : dim == DimZ::value ? grid_size(dimz())
                                 : 0;
   }
   
   template <typename Dim>
   ripple_all inline auto global_elements(Dim&& dim) noexcept -> size_t& {
     return dim == DimX::value   ? grid_elements_.x
            : dim == DimY::value ? grid_elements_.y
                                 : grid_elements_.z;
   }
   
   #endif // __CUDACC__
   
   } // namespace ripple::detail
   
   #endif // RIPPLE_EXECUTION_DETAIL_THREAD_INDEX_IMPL_HPP
