
.. _program_listing_file_include_ripple_core_io_multidim_writer.hpp:

Program Listing for File multidim_writer.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_io_multidim_writer.hpp>` (``include/ripple/core/io/multidim_writer.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/io/multidim_writer.hpp ---------------------- -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_IO_MULTIDIM_WRITER_HPP
   #define RIPPLE_IO_MULTIDIM_WRITER_HPP
   
   #include "printable_element.hpp"
   #include "../container/tensor.hpp"
   #include <string>
   #include <vector>
   
   namespace ripple {
   
   class MultidimWriter {
    public:
     struct DimSizes {
       size_t x = 1; 
       size_t y = 1; 
       size_t z = 1; 
   
       auto elements() const noexcept -> size_t {
         return (x == 0 ? 1 : x) * (y == 0 ? 1 : y) * (z == 0 ? 1 : z);
       }
   
       template <typename T, size_t Dims>
       static auto from_tensor(const Tensor<T, Dims>& t) noexcept -> DimSizes {
         return DimSizes{
           Dims >= 1 ? t.size(dimx()) : 1,
           Dims >= 2 ? t.size(dimy()) : 1,
           Dims >= 3 ? t.size(dimz()) : 0};
       }
     };
   
     using ElementNames = std::vector<std::string>;
   
     /*==--- [construction] ---------------------------------------------------==*/
   
     MultidimWriter() = default;
   
     virtual ~MultidimWriter() = default;
   
     /*==--- [methods] --------------------------------------------------------==*/
   
     // clang-format off
     template <typename T, size_t Dims, typename... Args>
     auto write(
       const Tensor<T, Dims>& data,
       const ElementNames&    element_names,
       Args&&...              args) -> void {
       // clang-format on
       PrintableElement elem;
       const DimSizes   dims = DimSizes::from_tensor(data);
       for (const auto& element : element_names) {
         if (get_printable_element(
               data, element.c_str(), 0, 0, 0, ripple_forward(args)...)
               .is_invalid()) {
           continue;
         }
       }
   
       for (const std::string& element : element_names) {
         const char* name = element.c_str();
         elem =
           get_printable_element(data, name, 0, 0, 0, ripple_forward(args)...);
         if (elem.is_invalid()) {
           continue;
         }
         write_element_header(elem);
   
         for (auto k : ripple::range(dims.z == 0 ? 1 : dims.z)) {
           for (auto j : ripple::range(dims.y)) {
             for (auto i : ripple::range(dims.x)) {
               elem = get_printable_element(
                 data, name, i, j, k, ripple_forward(args)...);
               write_element(elem);
             }
           }
         }
         write_element_footer();
       }
     }
   
     /*==--- [interface] ------------------------------------------------------==*/
   
     virtual auto set_name(std::string name) noexcept -> void = 0;
   
     virtual auto set_resolution(double res) noexcept -> void = 0;
   
     virtual auto write_metadata(const DimSizes& sizes) noexcept -> void = 0;
   
     virtual auto
     write_element(const PrintableElement& element) noexcept -> void = 0;
   
     virtual auto
     write_element_header(const PrintableElement& element) noexcept -> void = 0;
   
     virtual auto write_element_footer() noexcept -> void = 0;
   
     virtual auto open(std::string path = "", std::string suffix = "") -> void = 0;
   
     virtual auto close() -> void = 0;
   
     virtual auto clone() const noexcept -> std::shared_ptr<MultidimWriter> = 0;
   
    private:
     // clang-format off
     template <typename T, size_t Dims, typename... Args>
     auto get_printable_element(
       const Tensor<T, Dims>& tensor,
       const char*            name,
       size_t                 i,
       size_t                 j,
       size_t                 k,
       Args&&...              args) const noexcept -> PrintableElement {
       // clang-format on
       if constexpr (Dims == 1) {
         return printable_element(*tensor(i), name, args...);
       }
       if constexpr (Dims == 2) {
         return printable_element(*tensor(i, j), name, args...);
       }
       if constexpr (Dims == 3) {
         return printable_element(*tensor(i, j, k), name, args...);
       }
       return PrintableElement::not_found();
     }
     // clang-format on
   
     template <typename T, size_t Dims>
     auto get_dimension_sizes(const Tensor<T, Dims>& tensor) const -> DimSizes {
       return DimSizes{
         Dims >= 1 ? tensor.size(dimx()) : 1,
         Dims >= 2 ? tensor.size(dimy()) : 1,
         Dims >= 3 ? tensor.size(dimz()) : 0};
     }
   };
   
   template <typename Derived, typename... Args>
   auto make_writer(Args&&... args) -> std::shared_ptr<MultidimWriter> {
     return std::make_shared<Derived>(ripple_forward(args)...);
   }
   
   } // namespace ripple
   
   #endif // RIPPLE_IO_MULTIDIM_WRITER_HPP
