
.. _program_listing_file_include_ripple_core_boundary_boundary_loader.hpp:

Program Listing for File boundary_loader.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_boundary_boundary_loader.hpp>` (``include/ripple/core/boundary/boundary_loader.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/core/boundary/boundary_loader.hpp ----------- -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2019, 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_BOUNDARY_BOUNDARY_LOADER_HPP
   #define RIPPLE_BOUNDARY_BOUNDARY_LOADER_HPP
   
   #include "../iterator/iterator_traits.hpp"
   #include "../utility/portability.hpp"
   
   namespace ripple {
   
   template <typename Impl>
   class BoundaryLoader {
     ripple_host_device constexpr auto impl() const noexcept -> const Impl* {
       return static_cast<const Impl*>(this);
     }
   
    protected:
     template <typename Iterator>
     ripple_host_device auto
     static_assert_iterator(Iterator&&) const noexcept -> void {
       static_assert(
         is_iterator_v<Iterator>,
         "Boundary loader requires a parameter which is an iterator!");
     }
   
    public:
     template <typename Iterator, typename Dim, typename... Args>
     ripple_host_device constexpr auto
     load_front(Iterator&& it, int index, Dim&& dim, Args&&... args) const noexcept
       -> void {
       impl()->load_front(
         ripple_forward(it), index, ripple_forward(dim), ripple_forward(args)...);
     }
   
     template <typename Iterator, typename Dim, typename... Args>
     ripple_host_device constexpr auto
     load_back(Iterator&& it, int index, Dim&& dim, Args&&... args) const noexcept
       -> void {
       impl()->load_back(
         ripple_forward(it), index, ripple_forward(dim), ripple_forward(args)...);
     }
   };
   
   template <typename T>
   static constexpr bool is_loader_v =
     std::is_base_of_v<BoundaryLoader<std::decay_t<T>>, std::decay_t<T>>;
   
   } // namespace ripple
   
   #endif // RIPPLE_BOUNDARY_BOUNDARY_LOADER_HPP
