
.. _program_listing_file_include_ripple_algorithm_for_each.hpp:

Program Listing for File for_each.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_algorithm_for_each.hpp>` (``include/ripple/algorithm/for_each.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef RIPPLE_CORE_ALGORITHM_FOR_EACH_HPP
   #define RIPPLE_CORE_ALGORITHM_FOR_EACH_HPP
   
   #include "unrolled_for.hpp"
   #include <ripple/container/tuple.hpp>
   #include <ripple/utility/forward.hpp>
   
   namespace ripple {
   
   /*==--- [tuple] ------------------------------------------------------------==*/
   
   template <typename Functor, typename... Args, typename... FuncArgs>
   ripple_all constexpr auto for_each(
     Tuple<Args...>& tuple, Functor&& functor, FuncArgs&&... func_args) noexcept
     -> void {
     constexpr size_t num_args = sizeof...(Args);
     unrolled_for<num_args>([&] ripple_all(auto i) -> void {
       functor(get<i>(tuple), ripple_forward(func_args)...);
     });
   }
   
   template <typename Functor, typename... Args, typename... FuncArgs>
   ripple_all constexpr auto for_each(
     const Tuple<Args...>& tuple,
     Functor&&             functor,
     FuncArgs&&... func_args) noexcept -> void {
     constexpr size_t num_args = sizeof...(Args);
     unrolled_for<num_args>([&] ripple_all(auto i) -> void {
       functor(get<i>(tuple), ripple_forward(func_args)...);
     });
   }
   
   template <typename Functor, typename... Args, typename... FuncArgs>
   ripple_all constexpr auto for_each(
     Tuple<Args...>&& tuple, Functor&& functor, FuncArgs&&... func_args) noexcept
     -> void {
     constexpr size_t num_args = sizeof...(Args);
     unrolled_for<num_args>([&] ripple_all(auto i) -> void {
       functor(ripple_move(get<i>(tuple)), ripple_forward(func_args)...);
     });
   }
   
   /*==--- [parameter pack] ---------------------------------------------------==*/
   
   template <typename Functor, typename... Args>
   ripple_all constexpr auto
   for_each(Functor&& functor, Args&&... args) -> void {
     using TupleType = Tuple<Args&&...>;
     for_each(TupleType{ripple_forward(args)...}, ripple_forward(functor));
   }
   
   } // namespace ripple
   
   #endif // RIPPLE_CORE_ALGORITHM_FOR_EACH_HPP
