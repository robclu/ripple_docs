
.. _program_listing_file_include_ripple_allocation_aligned_heap_allocator.hpp:

Program Listing for File aligned_heap_allocator.hpp
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_allocation_aligned_heap_allocator.hpp>` (``include/ripple/allocation/aligned_heap_allocator.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef RIPPLE_ALLOCATION_ALIGNED_HEAP_ALLOCATOR_HPP
   #define RIPPLE_ALLOCATION_ALIGNED_HEAP_ALLOCATOR_HPP
   
   #include <cstdlib>
   
   namespace ripple {
   
   class AlignedHeapAllocator {
    public:
     // clang-format off
     AlignedHeapAllocator()  = default;
     ~AlignedHeapAllocator() = default;
   
     template <typename Arena>
     AlignedHeapAllocator(const Arena& arena) {}
   
     AlignedHeapAllocator(AlignedHeapAllocator&&)                    = default;
     auto operator=(AlignedHeapAllocator&&) -> AlignedHeapAllocator& = default;
   
     AlignedHeapAllocator(const AlignedHeapAllocator&) = delete;
     auto operator=(const AlignedHeapAllocator&)       = delete;
     // clang-format on
   
     auto alloc(size_t size, size_t alignment) noexcept -> void* {
       return aligned_alloc(alignment, size);
     }
   
     auto free(void* ptr) noexcept -> void {
       std::free(ptr);
     }
   
     auto free(void* ptr, size_t) noexcept -> void {
       std::free(ptr);
     }
   };
   
   } // namespace ripple
   
   #endif // RIPPLE_ALLOCATION_ALIGNED_HEAP_ALLOCATOR_HPP
