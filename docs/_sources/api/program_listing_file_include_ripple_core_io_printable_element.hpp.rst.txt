
.. _program_listing_file_include_ripple_core_io_printable_element.hpp:

Program Listing for File printable_element.hpp
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_io_printable_element.hpp>` (``include/ripple/core/io/printable_element.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/io/printable_element.hpp -------------------- -*- c++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_IO_PRINTABLE_ELEMENT_HPP
   #define RIPPLE_IO_PRINTABLE_ELEMENT_HPP
   
   #include "printable_traits.hpp"
   #include "../utility/forward.hpp"
   #include <cstring>
   #include <string>
   #include <vector>
   
   namespace ripple {
   
   class PrintableElement {
    public:
     // clang-format off
     using Value          = double;
     using ValueContainer = std::vector<Value>;
     // clang-format on
   
     enum AttributeKind : uint8_t {
       scalar, 
       vector, 
       invalid 
     };
   
    private:
     ValueContainer values_ = {}; 
   
    public:
     std::string   name = "";                     
     AttributeKind kind = AttributeKind::invalid; 
   
     /*==--- [construction] ---------------------------------------------------==*/
   
     PrintableElement() noexcept = default;
   
     template <typename... Values>
     PrintableElement(
       std::string name, AttributeKind kind, Values&&... values) noexcept
     : values_{ripple_forward(values)...}, name{ripple_move(name)}, kind{kind} {}
   
     //==--- [interface] ------------------------------------------------------==//
   
     auto operator==(const PrintableElement& other) const noexcept -> bool;
   
     auto operator!=(const PrintableElement& other) const noexcept -> bool;
   
     auto add_value(const Value& value) noexcept -> void;
   
     auto values() const noexcept -> const ValueContainer&;
   
     auto first_value() const noexcept -> Value;
   
     auto is_invalid() const noexcept -> bool;
   
     static auto not_found() -> PrintableElement;
   };
   
   template <typename T, typename... Args>
   auto printable_element(T&& data, const char* name, Args&&... args) noexcept
     -> PrintableElement {
     if constexpr (is_printable_v<T>) {
       return data.printable_element(name, ripple_forward(args)...);
     } else {
       return PrintableElement{
         name, PrintableElement::AttributeKind::scalar, data};
     }
   }
   
   } // namespace ripple
   
   #endif // RIPPLE_IO_PRINTABLE_ELEMENT_HPP
