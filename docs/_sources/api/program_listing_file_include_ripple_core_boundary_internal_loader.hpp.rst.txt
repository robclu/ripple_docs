
.. _program_listing_file_include_ripple_core_boundary_internal_loader.hpp:

Program Listing for File internal_loader.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_boundary_internal_loader.hpp>` (``include/ripple/core/boundary/internal_loader.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/core/boundary/inernal_loader.hpp ------------ -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                     Copyright (c) 2019, 2020 Rob Clucas.
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_BOUNDARY_INTERNAL_LOADER_HPP
   #define RIPPLE_BOUNDARY_INTERNAL_LOADER_HPP
   
   #include <ripple/core/iterator/iterator_traits.hpp>
   #include <ripple/core/utility/portability.hpp>
   
   namespace ripple {
   
   template <typename Impl>
   class InternalLoader {
     ripple_all constexpr auto impl() const -> const Impl* {
       return static_cast<const Impl*>(this);
     }
   
    protected:
     template <typename Iterator>
     ripple_all auto
     static_assert_iterator(Iterator&&) const noexcept -> void {
       static_assert(
         is_iterator_v<Iterator>,
         "Boundary loader requires a parameter which is an iterator!");
     }
   
    public:
     template <typename IteratorFrom, typename IteratorTo, typename... Args>
     ripple_all constexpr auto
     load(IteratorFrom&& it_from, IteratorTo&& it_to, Args&&... args) const
       noexcept -> void {
       impl()->load(
         static_cast<IteratorFrom&&>(it_from),
         static_cast<IteratorTo&&>(it_to),
         static_cast<Args&&>(args)...);
     }
   };
   
   } // namespace ripple
   
   #endif // RIPPLE_BOUNDARY_INTERNAL_LOADER_HPP
