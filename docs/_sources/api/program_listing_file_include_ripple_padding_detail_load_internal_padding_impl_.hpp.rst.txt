
.. _program_listing_file_include_ripple_padding_detail_load_internal_padding_impl_.hpp:

Program Listing for File load_internal_padding_impl_.hpp
========================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_padding_detail_load_internal_padding_impl_.hpp>` (``include/ripple/padding/detail/load_internal_padding_impl_.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef RIPPLE_PADDING_DETAIL_LOAD_INTERNAL_PADDING_IMPL__HPP
   #define RIPPLE_PADDING_DETAIL_LOAD_INTERNAL_PADDING_IMPL__HPP
   
   #include <ripple/utility/range.hpp>
   #include <ripple/utility/type_traits.hpp>
   
   namespace ripple::detail {
   
   // clang-format off
   template <
     size_t Dims, typename ItFrom, typename ItTo, dim_1d_enable_t<Dims> = 0>
   ripple_all auto
     load_internal(ItFrom&& from, ItTo&& to) noexcept -> void {
     // clang-format on
     const int pad      = static_cast<int>(to.padding());
     const int dim_size = static_cast<int>(std::min(
       to.size(dimx()),
       from.size(dimx()) - block_idx(dimx()) * block_size(dimx())));
   
     // Number of iterations for the dimension.
     // Here, this is essentially the ceil of (size + pad) / size:
     const int iters        = (2 * (dim_size + pad) - 1) / dim_size;
     const int shift_amount = std::min(dim_size, 2 * pad);
     for (int i : range(iters)) {
       *to.offset(dimx(), i * shift_amount) =
         *from.offset(dimx(), i * shift_amount);
     }
   }
   
   // clang-format off
   
   template <
     size_t Dims, typename ItFrom, typename ItTo, not_dim_1d_enable_t<Dims> = 0>
   ripple_all auto
   load_internal(ItFrom&& from, ItTo&& to) noexcept -> void {
     // clang-format on
     // Has to be 2d or 3d:
     constexpr auto dim      = Dims == 3 ? dimz() : dimy();
     const int      pad      = static_cast<int>(to.padding());
     const int      dim_size = static_cast<int>(
       std::min(to.size(dim), from.size(dim) - block_idx(dim) * block_size(dim)));
   
     // Number of iterations for the dimension. Here, this is essentially the ceil
     // of (size + pad) / size:
     const int iters        = (2 * (dim_size + pad) - 1) / dim_size;
     const int shift_amount = std::min(dim_size, 2 * pad);
     for (int i : range(iters)) {
       load_internal<Dims - 1>(
         from.offset(dim, i * shift_amount), to.offset(dim, i * shift_amount));
     }
   }
   
   } // namespace ripple::detail
   
   #endif // RIPPLE_PADDING_DETAIL_LOAD_INTERNAL_PADDING_IMPL__HPP
