
.. _program_listing_file_include_ripple_core_storage_strided_storage_view.hpp:

Program Listing for File strided_storage_view.hpp
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ripple_core_storage_strided_storage_view.hpp>` (``include/ripple/core/storage/strided_storage_view.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //==--- ripple/core/storage/strided_storage_view.hpp ------- -*- C++ -*- ---==//
   //
   //                                Ripple
   //
   //                      Copyright (c) 2019, 2020 Rob Clucas
   //
   //  This file is distributed under the MIT License. See LICENSE for details.
   //
   //==------------------------------------------------------------------------==//
   //
   //
   //==------------------------------------------------------------------------==//
   
   #ifndef RIPPLE_STORAGE_STRIDED_STORAGE_VIEW_HPP
   #define RIPPLE_STORAGE_STRIDED_STORAGE_VIEW_HPP
   
   #include "storage_element_traits.hpp"
   #include "storage_traits.hpp"
   #include "storage_accessor.hpp"
   #include "../multidim/offset_to.hpp"
   #include "../utility/type_traits.hpp"
   
   namespace ripple {
   
   template <typename... Ts>
   class StridedStorageView : public StorageAccessor<StridedStorageView<Ts...>> {
     // clang-format off
     using Ptr      = void*;
     using ConstPtr = const void*;
     using Storage  = StridedStorageView;
     // clang-format on
   
     template <typename T, bool B>
     friend struct LayoutTraits;
   
     /*==--- [traits] ---------------------------------------------------------==*/
   
     template <typename T>
     using element_value_t = typename storage_element_traits_t<T>::Value;
   
     template <size_t I>
     using nth_element_value_t = element_value_t<nth_element_t<I, Ts...>>;
   
     /*==--- [constants] ------------------------------------------------------==*/
   
     static constexpr size_t num_types = sizeof...(Ts);
   
     template <typename T>
     static constexpr size_t element_components =
       storage_element_traits_t<T>::num_elements;
   
     static constexpr size_t storage_byte_size =
       (storage_element_traits_t<Ts>::byte_size + ... + size_t{0});
   
     template <size_t I>
     static constexpr size_t nth_element_bytes = sizeof(nth_element_value_t<I>);
   
     template <size_t I>
     static constexpr size_t nth_element_components_v =
       storage_element_traits_t<nth_element_t<I, Ts...>>::num_elements;
   
     /*==--- [allocator] ------------------------------------------------------==*/
   
     struct Allocator {
      private:
       template <size_t I>
       ripple_all static constexpr auto
       offset_scale(Num<I>, DimX) noexcept -> size_t {
         return 1;
       }
   
       template <size_t I>
       ripple_all static constexpr auto
       offset_scale(Num<I>, DimY) noexcept -> size_t {
         return nth_element_components<I>;
       }
   
       template <size_t I>
       ripple_all static constexpr auto
       offset_scale(Num<I>, DimZ) noexcept -> size_t {
         return nth_element_components<I>;
       }
   
       template <size_t I>
       ripple_all static constexpr auto
       offset_scale(Num<I>, size_t dim) noexcept -> size_t {
         return dim == 0 ? 1 : nth_element_components<I>;
       }
   
      public:
       static constexpr size_t alignment =
         max_element(storage_element_traits_t<Ts>::align_size...);
   
       ripple_all static constexpr auto
       allocation_size(size_t elements) noexcept -> size_t {
         return storage_byte_size * elements;
       }
   
       template <size_t Elements>
       ripple_all static constexpr auto
       allocation_size() noexcept -> size_t {
         return storage_byte_size * Elements;
       }
   
       static constexpr auto strided_types() noexcept -> size_t {
         return num_types;
       }
   
       template <size_t I>
       static constexpr auto num_elements() noexcept -> size_t {
         static_assert(I < num_types, "Invalid type index!");
         return nth_element_components_v<I>;
       }
   
       template <size_t I>
       static constexpr auto element_byte_size() noexcept -> size_t {
         static_assert(I < num_types, "Invalid type index!");
         return nth_element_bytes<I>;
       }
   
       template <typename SpaceImpl, typename Dim>
       ripple_all static auto offset(
         const Storage&                  storage,
         const MultidimSpace<SpaceImpl>& space,
         Dim&&                           dim,
         int                             amount) noexcept -> Storage {
         Storage r;
         r.stride_ = storage.stride_;
         unrolled_for<num_types>([&](auto i) {
           using Type = nth_element_value_t<i>;
           r.data_[i] = static_cast<void*>(
             static_cast<Type*>(storage.data_[i]) +
             amount * space.step(ripple_forward(dim)) *
               offset_scale(i, ripple_forward(dim)));
         });
         return r;
       }
   
       template <typename SpaceImpl, typename Dim>
       ripple_all static auto shift(
         Storage&                        storage,
         const MultidimSpace<SpaceImpl>& space,
         Dim&&                           dim,
         int                             amount) noexcept -> void {
         unrolled_for<num_types>([&](auto i) {
           using Type       = nth_element_value_t<i>;
           storage.data_[i] = static_cast<void*>(
             static_cast<Type*>(storage.data_[i]) +
             amount * space.step(ripple_forward(dim)) *
               offset_scale(i, ripple_forward(dim)));
         });
       }
   
       template <typename SpaceImpl>
       ripple_all static auto
       create(void* ptr, const MultidimSpace<SpaceImpl>& space) noexcept
         -> Storage {
         Storage r;
         r.stride_         = space.size(dimx());
         r.data_[0]        = ptr;
         const auto size   = space.size();
         auto       offset = 0;
         unrolled_for<num_types - 1>([&](auto prev_index) {
           constexpr auto curr_index      = prev_index + 1;
           constexpr auto components_prev = nth_element_components<prev_index>;
           constexpr auto bytes_prev      = nth_element_bytes<prev_index>;
           offset += components_prev * size * bytes_prev;
           r.data_[curr_index] =
             static_cast<void*>(static_cast<char*>(ptr) + offset);
         });
         return r;
       }
     };
   
     /*==--- [members] --------------------------------------------------------==*/
   
     /*
      * NOTE: An alternative implementation would be to store a single pointer, and
      * then modify the offsetting of the data to the different types. Both
      * implementations were benchmarked on a number of different use cases and
      * there was little difference. While the (potentially additional) pointers
      * slightly increase memory use, the single pointer implementation is more
      * complex and increased register usage in gpu code.
      */
   
     Ptr      data_[num_types]; 
     uint32_t stride_ = 1;      
   
    public:
     template <size_t I>
     static constexpr size_t nth_element_components =
       element_components<nth_element_t<I, Ts...>>;
   
     /*==--- [construction] ---------------------------------------------------==*/
   
     StridedStorageView() = default;
   
     template <typename Impl>
     ripple_all
     StridedStorageView(const StorageAccessor<Impl>& other) noexcept {
       copy(static_cast<const Impl&>(other));
     }
   
     ripple_all
     StridedStorageView(const StridedStorageView& other) noexcept
     : stride_{other.stride_} {
       unrolled_for<num_types>([&](auto i) { data_[i] = other.data_[i]; });
     }
   
     ripple_all StridedStorageView(StridedStorageView&& other) noexcept
     : stride_{other.stride_} {
       unrolled_for<num_types>([&](auto i) {
         data_[i]       = other.data_[i];
         other.data_[i] = nullptr;
       });
     }
   
     /*==--- [operator overload] ----------------------------------------------==*/
   
     template <typename Impl>
     ripple_all auto operator=(const StorageAccessor<Impl>& other) noexcept
       -> StridedStorageView& {
       copy(static_cast<const Impl&>(other));
       return *this;
     }
   
     ripple_all auto
     operator=(const StridedStorageView& other) noexcept -> StridedStorageView& {
       copy(other);
       return *this;
     }
   
     ripple_all auto
     operator=(StridedStorageView&& other) noexcept -> StridedStorageView& {
       stride_ = other.stride_;
       unrolled_for<num_types>([&](auto i) {
         data_[i]       = other.data_[i];
         other.data_[i] = nullptr;
       });
       return *this;
     }
     /*==--- [interface] ------------------------------------------------------==*/
   
     ripple_all auto data() noexcept -> Ptr {
       return &data_[0];
     }
   
     ripple_all auto data() const noexcept -> ConstPtr {
       return &data_[0];
     }
   
     ripple_all auto data_ptrs() noexcept -> std::vector<Ptr> {
       std::vector<Ptr> p;
       unrolled_for<num_types>([&](auto i) { p.push_back(data_[i]); });
       return p;
     }
   
     template <typename Other>
     ripple_all auto copy(const Other& other) noexcept -> void {
       static_assert(
         is_storage_accessor_v<Other>,
         "Can only copy from storage accessor types!");
       unrolled_for<num_types>([&](auto i) {
         constexpr size_t type_idx = i;
         using Type                = nth_element_t<type_idx, Ts...>;
         constexpr auto values     = element_components<Type>;
         copy_from_to<type_idx, values, Type>(other, *this);
       });
     }
   
     template <size_t I>
     ripple_all constexpr auto components_of() const noexcept -> size_t {
       return nth_element_components<I>;
     }
   
     template <
       size_t I,
       typename T                  = nth_element_t<I, Ts...>,
       non_vec_element_enable_t<T> = 0>
     ripple_all auto get() noexcept -> element_value_t<T>& {
       return *static_cast<element_value_t<T>*>(data_[I]);
     }
   
     template <
       size_t I,
       typename T                  = nth_element_t<I, Ts...>,
       non_vec_element_enable_t<T> = 0>
     ripple_all auto get() const noexcept -> const element_value_t<T>& {
       return *static_cast<const element_value_t<T>*>(data_[I]);
     }
   
     template <
       size_t I,
       size_t J,
       typename T              = nth_element_t<I, Ts...>,
       vec_element_enable_t<T> = 0>
     ripple_all auto get() noexcept -> element_value_t<T>& {
       static_assert(
         J < element_components<T>, "Out of range access for element!");
       return static_cast<element_value_t<T>*>(data_[I])[J * stride_];
     }
   
     template <
       size_t I,
       size_t J,
       typename T              = nth_element_t<I, Ts...>,
       vec_element_enable_t<T> = 0>
     ripple_all auto get() const noexcept -> const element_value_t<T>& {
       static_assert(
         J < element_components<T>, "Out of range access for element!");
       return static_cast<const element_value_t<T>*>(data_[I])[J * stride_];
     }
   
     template <
       size_t I,
       typename T              = nth_element_t<I, Ts...>,
       vec_element_enable_t<T> = 0>
     ripple_all auto get(size_t j) noexcept -> element_value_t<T>& {
       return static_cast<element_value_t<T>*>(data_[I])[j * stride_];
     }
   
     template <
       size_t I,
       typename T              = nth_element_t<I, Ts...>,
       vec_element_enable_t<T> = 0>
     ripple_all auto
     get(size_t j) const noexcept -> const element_value_t<T>& {
       return static_cast<const element_value_t<T>*>(data_[I])[j * stride_];
     }
   };
   
   /*==--- [single type specialization] ---------------------------------------==*/
   
   template <typename Type>
   class StridedStorageView<Type>
   : public StorageAccessor<StridedStorageView<Type>> {
     // clang-format off
     using Storage       = StridedStorageView;
     using ElementTraits = storage_element_traits_t<Type>;
     using ValueType     = typename ElementTraits::Value;
     using Ptr           = ValueType*;
     using ConstPtr      = const ValueType*;
    
     template <typename T, bool B>
     friend struct LayoutTraits;
   
     /*==--- [constants] ------------------------------------------------------==*/
   
     // clang-format off
     static constexpr size_t num_types          = 1;
     static constexpr size_t element_components = ElementTraits::num_elements;
     static constexpr size_t storage_byte_size  = ElementTraits::byte_size;
     static constexpr size_t element_bytes      = sizeof(ValueType);
     // clang-format on
   
     /*==--- [allocator] ------------------------------------------------------==*/
   
     struct Allocator {
      private:
       template <typename Dim>
       ripple_all static constexpr auto
       offset_scale(Dim&& dim) noexcept -> size_t {
         if constexpr (is_cx_number_v<Dim>) {
           if constexpr (std::decay_t<Dim>::value == DimX::value) {
             return 1;
           } else {
             return element_components;
           }
         } else {
           return dim == 0 ? 1 : element_components;
         }
       }
   
      public:
       static constexpr size_t alignment = ElementTraits::align_size;
   
       ripple_all static constexpr auto
       allocation_size(size_t elements) noexcept -> size_t {
         return storage_byte_size * elements;
       }
   
       template <size_t Elements>
       ripple_all static constexpr auto
       allocation_size() noexcept -> size_t {
         return storage_byte_size * Elements;
       }
   
       static constexpr auto strided_types() noexcept -> size_t {
         return 1;
       }
   
       template <size_t I>
       static constexpr auto num_elements() noexcept -> size_t {
         return element_components;
       }
   
       template <size_t I>
       static constexpr auto element_byte_size() noexcept -> size_t {
         return element_bytes;
       }
   
       template <typename SpaceImpl, typename Dim>
       ripple_all static auto offset(
         const Storage&                  storage,
         const MultidimSpace<SpaceImpl>& space,
         Dim&&                           dim,
         int                             amount) noexcept -> Storage {
         Storage r;
         r.stride_ = storage.stride_;
         r.data_   = storage.data_ + amount * space.step(ripple_forward(dim)) *
                                     offset_scale(ripple_forward(dim));
         return r;
       }
   
       template <typename SpaceImpl, typename Dim>
       ripple_all static auto shift(
         Storage&                        storage,
         const MultidimSpace<SpaceImpl>& space,
         Dim&&                           dim,
         int                             amount) noexcept -> void {
         storage.data_ = storage.data_ + amount * space.step(ripple_forward(dim)) *
                                           offset_scale(ripple_forward(dim));
       }
   
       template <typename SpaceImpl>
       ripple_all static auto
       create(void* ptr, const MultidimSpace<SpaceImpl>& space) noexcept
         -> Storage {
         Storage r;
         r.stride_ = space.size(dimx());
         r.data_   = static_cast<Ptr>(ptr);
         return r;
       }
     };
   
     /*==--- [members] --------------------------------------------------------==*/
   
     Ptr      data_   = nullptr; 
     uint32_t stride_ = 1;       
   
    public:
     /*==--- [construction] ---------------------------------------------------==*/
   
     StridedStorageView() = default;
   
     template <typename Impl>
     ripple_all
     StridedStorageView(const StorageAccessor<Impl>& other) noexcept {
       copy(static_cast<const Impl&>(other));
     }
   
     ripple_all
     StridedStorageView(const StridedStorageView& other) noexcept
     : data_{other.data_}, stride_{other.stride_} {}
   
     ripple_all StridedStorageView(StridedStorageView&& other) noexcept
     : data_{other.data_}, stride_{other.stride_} {
       other.data_ = nullptr;
     }
   
     /*==--- [operator overload] ----------------------------------------------==*/
   
     template <typename Impl>
     ripple_all auto operator=(const StorageAccessor<Impl>& other) noexcept
       -> StridedStorageView& {
       copy(static_cast<const Impl&>(other));
       return *this;
     }
   
     ripple_all auto
     operator=(const StridedStorageView& other) noexcept -> StridedStorageView& {
       copy(other);
       return *this;
     }
   
     ripple_all auto
     operator=(StridedStorageView&& other) noexcept -> StridedStorageView& {
       stride_     = other.stride_;
       data_       = other.data_;
       other.data_ = nullptr;
       return *this;
     }
   
     /*==--- [interface] ------------------------------------------------------==*/
   
     ripple_all auto data() noexcept -> Ptr {
       return &data_;
     }
   
     ripple_all auto data() const noexcept -> ConstPtr {
       return &data_;
     }
   
     ripple_all auto data_ptrs() noexcept -> std::vector<Ptr> {
       return std::vector<Ptr>{data_};
     }
   
     template <typename Other>
     ripple_all auto copy(const Other& other) noexcept -> void {
       static_assert(
         is_storage_accessor_v<Other>,
         "Can only copy from storage accessor types!");
       copy_from_to<0, element_components, Type>(other, *this);
     }
   
     template <size_t I>
     ripple_all constexpr auto components_of() const noexcept -> size_t {
       return element_components;
     }
   
     template <
       size_t I,
       typename T                  = nth_element_t<I, Type>,
       non_vec_element_enable_t<T> = 0>
     ripple_all auto get() noexcept -> ValueType& {
       static_assert(I == 0, "Element only has one type!");
       return *data_;
     }
   
     template <
       size_t I,
       typename T                  = nth_element_t<I, Type>,
       non_vec_element_enable_t<T> = 0>
     ripple_all auto get() const noexcept -> const ValueType& {
       static_assert(I == 0, "Element only has one type!");
       return *data_;
     }
   
     template <size_t I, size_t J, vec_element_enable_t<Type> = 0>
     ripple_all auto get() noexcept -> ValueType& {
       static_assert(I == 0, "Element only has one type!");
       static_assert(J < element_components, "Out of range access for element!");
       return data_[J * stride_];
     }
   
     template <size_t I, size_t J, vec_element_enable_t<Type> = 0>
     ripple_all auto get() const noexcept -> const ValueType& {
       static_assert(I == 0, "Element only has one type!");
       static_assert(J < element_components, "Out of range access for element!");
       return data_[J * stride_];
     }
   
     template <size_t I, vec_element_enable_t<Type> = 0>
     ripple_all auto get(size_t j) noexcept -> ValueType& {
       return data_[j * stride_];
     }
   
     template <size_t I, vec_element_enable_t<Type> = 0>
     ripple_all auto get(size_t j) const noexcept -> const ValueType& {
       return data_[j * stride_];
     }
   };
   
   } // namespace ripple
   
   #endif // RIPPLE_STORAGE_STRIDED_STORAGE_VIEW_HPP
